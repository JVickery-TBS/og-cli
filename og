#!/usr/bin/env bash

#
# Variables
#

# text
Cyan='\033[0;36m'
Yellow='\033[1;33m'
Red='\033[0;31m'
Orange='\033[0;33m'
Green='\033[0;32m'
NC='\033[0;0m'
EOL='\n'
SPACER='\n\n'
INDENT='    '
BOLD='\033[1m'
HAIR='\033[0m'
ITALIC='\033[3m'

REPO_URI='\e]8;;https://github.com/open-data/docker-og/\e\\Docker OG\e]8;;\e\\'
DOCKER_URI='\e]8;;https://docs.docker.com/get-docker/\e\\Docker\e]8;;\e\\'
COMPOSE_URI='\e]8;;https://docs.docker.com/compose/\e\\Docker Compose\e]8;;\e\\'
GIT_URI='\e]8;;https://git-scm.com/download/\e\\Git\e]8;;\e\\'
PRE_BUILD_URI='\e]8;;https://github.com/open-data/docker-og#prebuild\e\\configure local or global files and backups.\e]8;;\e\\'
projectID=''
projectDir='false'
dockerComposeCommand='docker compose'

function output_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og${HAIR} COMMAND${SPACER}"
    printf "${INDENT}Commands:${EOL}"
    printf "${INDENT}${INDENT}${BOLD}docker${HAIR}    Interfaces with the ${REPO_URI} repository.${SPACER}"
    printf "${INDENT}${INDENT}          Usage: ${BOLD}og docker${HAIR} COMMAND${SPACER}"
    printf "${INDENT}${INDENT}          Commands:${EOL}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}init${HAIR}       Initializes a new ${REPO_URI} instance into a directory with the provided PROJECT ID. The PROJECT ID must be lowercase and contain only alphanumeric characters.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}           Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}destroy${HAIR}    Deletes the project directory, docker images, and docker networks for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}           Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}build${HAIR}      Builds all of the docker containers for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}           Usage: ${BOLD}og docker build${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}[PROJECT ID] install [container]${HAIR}           Executes the installaion script for the given PROJECT ID and container.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}                                           Usage: ${BOLD}og docker [PROJECT ID] install${HAIR} [drupal|django|ckan|ckanapi]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}[PROJECT ID] [${dockerComposeCommand} command]${HAIR}      Executes the ${dockerComposeCommand} command for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}                                           Usage: ${BOLD}og docker [PROJECT ID]${HAIR} [${dockerComposeCommand} command]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}help${HAIR}       Outputs the og docker manual.${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}help${HAIR}      Outputs this manual.${EOL}"
    printf "${EOL}"

}

function output_docker_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker${HAIR} COMMAND${SPACER}"
    printf "${INDENT}Commands:${EOL}"
    printf "${INDENT}${INDENT}${BOLD}init${HAIR}       Initializes a new ${REPO_URI} instance into a directory with the provided PROJECT ID. The PROJECT ID must be lowercase and contain only alphanumeric characters.${SPACER}"
    printf "${INDENT}${INDENT}           Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}destroy${HAIR}    Deletes the project directory, docker images, and docker networks for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}           Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}build${HAIR}      Builds all of the docker containers for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}           Usage: ${BOLD}og docker build${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}[PROJECT ID] install [container]${HAIR}           Executes the installaion script for the given PROJECT ID and container.${SPACER}"
    printf "${INDENT}${INDENT}                                           Usage: ${BOLD}og docker [PROJECT ID] install${HAIR} [drupal|django|ckan|ckanapi]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}[PROJECT ID] [${dockerComposeCommand} command]${HAIR}      Executes the ${dockerComposeCommand} command for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}                                           Usage: ${BOLD}og docker [PROJECT ID]${HAIR} [${dockerComposeCommand} command]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}help${HAIR}       Outputs this manual.${EOL}"
    printf "${EOL}"

}

function output_docker_init_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${EOL}"
    printf "${EOL}"

}

function output_docker_destroy_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${EOL}"
    printf "${EOL}"

}

function output_docker_build_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker build${HAIR} [PROJECT ID]${EOL}"
    printf "${EOL}"

}

function output_docker_compose_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker [PROJECT ID]${HAIR} [${dockerComposeCommand} command]${EOL}"
    printf "${EOL}"

}

function output_docker_install_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker [PROJECT ID] install${HAIR} [drupal|django|ckan|ckanapi]${EOL}"
    printf "${EOL}"

}

function does_docker_project_exist {

    dockerProjectNotExist='false'

    docker network inspect og-local-network--$1 >/dev/null 2>&1 || dockerProjectNotExist='true'

    if [[ $dockerProjectNotExist == "true" ]]; then

        echo "false"
        return 0

    fi

    echo "true"
    return 0

}

function does_project_directory_exist {

    if [[ -d "$(pwd)/$1" ]]; then

        echo "true"
        return 0

    fi

    echo "false"
    return 0

}

function regenerate_hosts_file {

    if [[ -d "/etc/hosts.d" ]]; then

        if [[ -f "/etc/hosts.d/default.conf" ]]; then

            sudo cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

        else

            sudo cp /etc/hosts /etc/hosts.d/default.conf | sed 's/^/    /g'
            sudo cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

        fi

    else

        sudo mkdir /etc/hosts.d | sed 's/^/    /g'
        sudo cp /etc/hosts /etc/hosts.d/default.conf | sed 's/^/    /g'
        sudo cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function generate_project_hosts_file {

    regenerate_hosts_file

    if [[ -d "/etc/hosts.d" ]]; then

        if [[ -f "/etc/hosts.d/$1.conf" ]]; then

            sudo rm -rf /etc/hosts.d/$1.conf | sed 's/^/    /g'

        fi

        sudo touch /etc/hosts.d/$1.conf | sed 's/^/    /g'
        if [[ $? -eq 0 ]]; then
            printf "${Green}${INDENT}Generate project host file /etc/hosts.d/$1.conf: OK${NC}${EOL}"
        else
            printf "${Red}${INDENT}Generate project host file /etc/hosts.d/$1.conf: FAIL${NC}${EOL}"
        fi
        echo "" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	registry.open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	portal.open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	solr.open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	search.open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        sudo cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function delete_project_hosts_file {

    regenerate_hosts_file

    if [[ -d "/etc/hosts.d" ]]; then

        sudo rm -rf /etc/hosts.d/$1.conf | sed 's/^/    /g'
        if [[ $? -eq 0 ]]; then
            printf "${Green}${INDENT}Delete project host file /etc/hosts.d/$1.conf: OK${NC}${EOL}"
        else
            printf "${Red}${INDENT}Delete project host file /etc/hosts.d/$1.conf: FAIL${NC}${EOL}"
        fi
        sudo cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function generate_project_registry_file {

    if [[ -d "$HOME/.docker-og.d" ]]; then

        if [[ -f "$HOME/.docker-og.d/$1.conf" ]]; then

            rm -rf ~/.docker-og.d/$1.conf

        fi

        touch ~/.docker-og.d/$1.conf
        if [[ $? -eq 0 ]]; then
            printf "${Green}${INDENT}Generate project registry file $HOME/.docker-og.d/$1.conf: OK${NC}${EOL}"
        else
            printf "${Red}${INDENT}Generate project registry file $HOME/.docker-og.d/$1.conf: FAIL${NC}${EOL}"
        fi
        echo $(pwd)/$1 > ~/.docker-og.d/$1.conf

    else

        mkdir ~/.docker-og.d
        touch ~/.docker-og.d/$1.conf
        if [[ $? -eq 0 ]]; then
            printf "${Green}${INDENT}Generate project registry file $HOME/.docker-og.d/$1.conf: OK${NC}${EOL}"
        else
            printf "${Red}${INDENT}Generate project registry file $HOME/.docker-og.d/$1.conf: FAIL${NC}${EOL}"
        fi
        echo $(pwd)/$1 > ~/.docker-og.d/$1.conf

    fi

}

function delete_project_registry_file {

    if [[ -f "$HOME/.docker-og.d/$1.conf" ]]; then

        rm -rf ~/.docker-og.d/$1.conf
        if [[ $? -eq 0 ]]; then
            printf "${Green}${INDENT}Delete project registry file $HOME/.docker-og.d/$1.conf: OK${NC}${EOL}"
        else
            printf "${Red}${INDENT}Delete project registry file $HOME/.docker-og.d/$1.conf: FAIL${NC}${EOL}"
        fi

    fi

}

function get_working_directory_from_project_id {

    if [[ -d "$HOME/.docker-og.d" ]]; then

        if [[ -f "$HOME/.docker-og.d/$1.conf" ]]; then

            echo "$(head -n 1 $HOME/.docker-og.d/$1.conf)"
            return 0

        fi

    fi

    echo "false"
    return 0

}

function docker_init_command {

    if [[ $3 ]]; then

        if [[ $3 == "default" ]]; then

            printf "${EOL}"
            printf "${Red}${INDENT}Project ID ${ITALIC}${BOLD}$3${HAIR}${Red} is a reserved ID. Abandoning docker project creation.${NC}${SPACER}"
            return 0

        fi

        if [[ ! -z "${3//[_[:digit:][:lower:]]}" && ! -z "${3//[-[:digit:][:lower:]]}" ]]; then

            printf "${EOL}"
            printf "${Red}${INDENT}Provided ID ${ITALIC}${BOLD}$3${HAIR}${Red} illegal. Project IDs must be lowercase and contain only alphanumeric characters. Abandoning docker project creation.${NC}${SPACER}"
            return 0

        fi

        if [[ $(does_docker_project_exist $3) == "false" ]]; then

            if [[ $(does_project_directory_exist $3) == "false" ]]; then

                projectID=$3
                confirmProjectCreation='false'

                printf "${EOL}"
                printf "${Cyan}${INDENT}Are you sure you want to create a new Docker OG project at ${ITALIC}${BOLD}$(pwd)/${projectID}${HAIR}${Cyan} with the ID of ${ITALIC}${BOLD}${projectID}${HAIR}${Cyan}?${NC}${EOL}"
                read -r -p $'\033[0;36m    [y/N]: \033[0;0m' response

                if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

                    confirmProjectCreation='true'

                fi

                if [[ $confirmProjectCreation == "true" ]]; then

                    # create hosts file for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Generating new project host file ${ITALIC}${BOLD}/etc/hosts.d/$3.conf${HAIR}${Cyan}. Maybe prompt for admin password...${NC}${EOL}"
                    generate_project_hosts_file $3

                    # create docker networks for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Creating docker network for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    docker network inspect og-local-network >/dev/null 2>&1 || docker network create og-local-network | sed 's/^/    /g'
                    docker network create og-local-network--$projectID | sed 's/^/    /g'
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Create docker network og-local-network--$projectID: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Create docker network og-local-network--$projectID: FAIL${NC}${EOL}"
                    fi

                    # create directory for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Creating project directory ${ITALIC}${BOLD}$(pwd)/${projectID}${HAIR}${Cyan} for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    mkdir $(pwd)/$projectID
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Create project directory $(pwd)/${projectID}: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Create project directory $(pwd)/${projectID}: FAIL${NC}${EOL}"
                    fi

                    # add absolute directory path to registry file for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Creating project registry file ${ITALIC}${BOLD}~/.docker-og.d/${projectID}.conf${HAIR}${Cyan} for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    generate_project_registry_file $3

                    # pull docker-og repo into project directory
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Cloning ${REPO_URI} into project directory ${ITALIC}${BOLD}$(pwd)/${projectID}${HAIR}${Cyan} for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    #git clone https://github.com/open-data/docker-og.git $(pwd)/$projectID 2>&1 | sed 's/^/    /g'
                    git clone --branch develop --single-branch https://github.com/open-data/docker-og.git $(pwd)/$projectID 2>&1 | sed 's/^/    /g'
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Clone ${REPO_URI} into $(pwd)/${projectID}: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Clone ${REPO_URI} into $(pwd)/${projectID}: FAIL${NC}${EOL}"
                    fi
                    
                    # create .env file and put project ID into it
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Creating ${ITALIC}${BOLD}.env${HAIR}${Cyan} file for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    touch $(pwd)/$projectID/.env
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Create project environment file $(pwd)/$projectID/.env: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Create project environment file $(pwd)/$projectID/.env: FAIL${NC}${EOL}"
                    fi
                    echo -e "PROJECT_ID=$projectID\nUSER_ID=$(id -u)\nGROUP_ID=$(id -g)" > $(pwd)/$projectID/.env

                    # create .env.conf file and put project ID into it
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Creating ${ITALIC}${BOLD}.env.conf${HAIR}${Cyan} nginx file for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    touch $(pwd)/$projectID/docker/config/nginx/conf/.env.conf
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Create project environment file $(pwd)/$projectID/docker/config/nginx/conf/.env.conf: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Create project environment file $(pwd)/$projectID/docker/config/nginx/conf/.env.conf: FAIL${NC}${EOL}"
                    fi
                    echo "set \$projectID \"$projectID\";" > $(pwd)/$projectID/docker/config/nginx/conf/.env.conf
                    
                    # run the pre-build.sh script
                    if [[ -f "$(pwd)/$projectID/pre-build.sh" ]]; then
                        printf "${EOL}"
                        printf "${Cyan}${INDENT}Running ${ITALIC}${BOLD}pre-build.sh${HAIR}${Cyan} script for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                        chmod 775 $(pwd)/$projectID/pre-build.sh
                        $(pwd)/$projectID/pre-build.sh $projectID no-interaction $(pwd)/$projectID
                    fi

                    # add execution to installation script
                    if [[ -f "$(pwd)/$projectID/install-local.sh" ]]; then
                        chmod 775 $(pwd)/$projectID/install-local.sh
                    fi
                    
                    printf "${Cyan}${INDENT}Project ${ITALIC}${BOLD}$3${HAIR}${Cyan} successfully initiated in the directory $(pwd)/$projectID: ${NC}${EOL}"

                    confirmBuildContainers='false'

                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Did you want to build the docker containers for project ${ITALIC}${BOLD}$projectID${HAIR}${Cyan}?${NC}${EOL}"
                    read -r -p $'\033[0;36m    [y/N]: \033[0;0m' response

                    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

                        confirmBuildContainers='true'

                    fi

                    if [[ $confirmBuildContainers == "true" ]]; then

                        og docker build $projectID

                    fi

                    printf "${Cyan}${INDENT}Run ${ITALIC}${BOLD}og docker $projectID install [drupal|django|ckan]${HAIR}${Cyan} to install the apps into their containers.${NC}${EOL}"
                    printf "${EOL}"

                else
                    
                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Abandoning docker project creation with ID: ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD}${NC}${SPACER}"

                fi
        
            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}Project directory ${ITALIC}${BOLD}$(pwd)/$3${HAIR}${Yellow}${BOLD} already exist.${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Yellow}${INDENT}Docker project with ID ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} already exist.${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Please supply a PROJECT ID${NC}${EOL}"
        output_docker_init_man

    fi

}

function docker_destroy_command {

    if [[ $3 ]]; then

        if [[ $(does_docker_project_exist $3) == "true"  ]]; then

            if [[ $(get_working_directory_from_project_id $3) != "false"  ]]; then

                projectID=$3
                projectDir="$(head -n 1 $HOME/.docker-og.d/$3.conf)"
                confirmProjectDeletion='false'

                printf "${EOL}"
                printf "${Cyan}${INDENT}Are you sure you want to delete the Docker OG project at ${ITALIC}${BOLD}${projectDir}${HAIR}${Cyan} with the ID of ${ITALIC}${BOLD}${projectID}${HAIR}${Cyan}?${NC}${EOL}"
                read -r -p $'\033[0;36m    [y/N]: \033[0;0m' response

                if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

                    confirmProjectDeletion='true'

                fi

                if [[ $confirmProjectDeletion == "true" ]]; then

                    # delete hosts file for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing project host file ${ITALIC}${BOLD}/etc/hosts.d/$3.conf${HAIR}${Cyan}. Maybe prompt for admin password...${NC}${EOL}"
                    delete_project_hosts_file $3

                    # delete docker networks for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing docker network for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    docker network rm og-local-network--$projectID | sed 's/^/    /g'
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Delete docker network og-local-network--$projectID: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Delete docker network og-local-network--$projectID: FAIL${NC}${EOL}"
                    fi

                    # delete docker images for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing docker images for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    docker image prune --force --filter "label=projectID=$projectID" | sed 's/^/    /g'
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Delete docker images labeled with 'projectID=$projectID': OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Delete docker images labeled with 'projectID=$projectID': FAIL${NC}${EOL}"
                    fi

                    # delete directory for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing project directory ${ITALIC}${BOLD}$projectDir${HAIR}${Cyan} for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    rm -rf $projectDir
                    if [[ $? -eq 0 ]]; then
                        printf "${Green}${INDENT}Delete project directory $projectDir: OK${NC}${EOL}"
                    else
                        printf "${Red}${INDENT}Delete project directory $projectDir: FAIL${NC}${EOL}"
                    fi

                    # delete registry file for the project ID
                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing project registry file ${ITALIC}${BOLD}~/.docker-og.d/${projectID}.conf${HAIR}${Cyan} for project ID: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                    delete_project_registry_file $3
                    printf "${EOL}"

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Abandoning docker project deletion with ID: ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD}${NC}${SPACER}"

                fi

            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}Project directory for ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Yellow}${INDENT}Docker project with ID ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Please supply a PROJECT ID${NC}${EOL}"
        output_docker_destroy_man

    fi

}

function docker_build_command {

    if [[ $3 ]]; then

        if [[ $(does_docker_project_exist $3) == "true"  ]]; then

            if [[ $(get_working_directory_from_project_id $3) != "false"  ]]; then

                projectID=$3
                projectDir="$(head -n 1 $HOME/.docker-og.d/$3.conf)"
                printf "${EOL}"
                printf "${Cyan}${INDENT}Running build for docker project: ${ITALIC}${BOLD}$3${HAIR}${Cyan}${NC}${EOL}"
                cd $projectDir
                $dockerComposeCommand build | sed 's/^/    /g'
                printf "${Cyan}${INDENT}Build attempt for docker project: ${ITALIC}${BOLD}$3${HAIR}${Cyan} complete.${NC}${EOL}"
                printf "${EOL}"

            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}Project directory for ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Yellow}${INDENT}Docker project with ID ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Please supply a PROJECT ID${NC}${EOL}"
        output_docker_build_man

    fi

}

function attempt_docker_compose_commands {

    if [[ $2 ]]; then

        if [[ $(does_docker_project_exist $2) == "true"  ]]; then

            if [[ $(get_working_directory_from_project_id $2) != "false"  ]]; then

                if [[ $3 ]]; then

                    if [[ $3 == "install" ]]; then

                        validAppRole='false'

                        if [[ $4 == "drupal" ]]; then validAppRole='true'; fi
                        if [[ $4 == "django" ]]; then validAppRole='true'; fi
                        if [[ $4 == "ckan" ]]; then validAppRole='true'; fi
                        if [[ $4 == "ckanapi" ]]; then validAppRole='true'; fi

                        if [[ $validAppRole == "false" ]]; then

                            printf "${EOL}"
                            printf "${Yellow}${INDENT}CONTAINER $4 invalid for app installation${NC}${EOL}"
                            output_docker_install_man

                        else

                            projectID=$2
                            projectDir="$(head -n 1 $HOME/.docker-og.d/$2.conf)"
                            appRole=$4
                            printf "${Cyan}Running ${ITALIC}${BOLD}$appRole installation${HAIR}${Cyan} for docker project: ${ITALIC}${BOLD}$2${HAIR}${Cyan}${NC}${EOL}"
                            cd $projectDir
                            $dockerComposeCommand up -d $appRole
                            if [[ $? -eq 0 ]]; then
                                $dockerComposeCommand exec $appRole bash -c "./install.sh"
                            else
                                printf "${Red}${INDENT}Something went wrong bringing up the ${ITALIC}${BOLD}$appRole container${HAIR}${Red} for the project: ${ITALIC}${BOLD}$projectID${HAIR}${Red}. Exiting installation...${NC}${EOL}"
                            fi

                        fi

                    else

                        projectID=$2
                        projectDir="$(head -n 1 $HOME/.docker-og.d/$2.conf)"
                        printf "${Cyan}Running ${dockerComposeCommand} command ${ITALIC}${BOLD}$3${HAIR}${Cyan} for docker project: ${ITALIC}${BOLD}$2${HAIR}${Cyan}${NC}${EOL}"
                        cd $projectDir
                        $dockerComposeCommand "${@:3}"

                    fi

                else 

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Missing ${dockerComposeCommand} COMMAND${NC}${EOL}"
                    output_docker_compose_man

                fi

            else

                if [[ $3 ]]; then

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$2${HAIR}${Yellow}${BOLD} not found (project may not exist)${NC}${EOL}"
                    output_docker_man

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$2${HAIR}${Yellow}${BOLD} not found${NC}${EOL}"
                    output_docker_man

                fi

            fi

        else

            if [[ $3 ]]; then

                printf "${EOL}"
                printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$2${HAIR}${Yellow}${BOLD} not found (project may not exist)${NC}${EOL}"
                output_docker_man

            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$2${HAIR}${Yellow}${BOLD} not found${NC}${EOL}"
                output_docker_man

            fi

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Missing COMMAND${NC}${EOL}"
        output_docker_man

    fi

}

function docker_command  {

    if [[ -x "$(command -v docker)" ]]; then

        # Gets the correct docker compose command (docker compose being the newest and docker-compose being older)
        if [[ -x "$(command -v 'docker compose')" ]]; then

            dockerComposeCommand='docker compose'

        elif [[ -x "$(command -v docker-compose)" ]]; then

            dockerComposeCommand='docker-compose'

        else

            dockerComposeCommand='false'

        fi

        if [[ dockerComposeCommand != "false" ]]; then

            if [[ -x "$(command -v git)" ]]; then
        
                if [[ $2 ]]; then

                    if [[ $2 == "init" ]]; then

                        docker_init_command "$@"

                    elif [[ $2 == "destroy" ]]; then

                        docker_destroy_command "$@"

                    elif [[ $2 == "build" ]]; then

                        docker_build_command "$@"

                    elif [[ $2 == "help" ]]; then

                        output_docker_man

                    else

                        attempt_docker_compose_commands "$@"

                    fi

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Please supply a COMMAND${NC}${EOL}"
                    output_docker_man

                fi

            else

                printf "${EOL}"
                printf "${Red}${INDENT}${BOLD}${GIT_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${GIT_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable.${HAIR}${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Red}${INDENT}${BOLD}${COMPOSE_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${COMPOSE_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable or via the ${ITALIC}${BOLD}docker${HAIR}${Red}${BOLD} command.${HAIR}${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Red}${INDENT}${BOLD}${DOCKER_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${DOCKER_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable.${HAIR}${NC}${SPACER}"

    fi

}

# check for first command
if [[ $1 ]]; then

    if [[ $1 == "docker" ]]; then

        docker_command "$@"

    elif [[ $1 == "help"  ]]; then

        output_man

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$1${HAIR}${Yellow}${BOLD} not found${NC}${EOL}"
        output_man

    fi

else

    printf "${EOL}"
    printf "${Yellow}${INDENT}Please supply a COMMAND${NC}${EOL}"
    output_man

fi
#!/usr/bin/env bash

#
# Variables
#

# text
Cyan='\033[0;36m'
Yellow='\033[1;33m'
Red='\033[0;31m'
Orange='\033[0;33m'
Green='\033[0;32m'
NC='\033[0;0m'
EOL='\n'
SPACER='\n\n'
INDENT='    '
BOLD='\033[1m'
HAIR='\033[0m'
ITALIC='\033[3m'

REPO_URI='\e]8;;https://github.com/open-data/docker-og/\e\\Docker OG\e]8;;\e\\'
DOCKER_URI='\e]8;;https://docs.docker.com/get-docker/\e\\Docker\e]8;;\e\\'
COMPOSE_URI='\e]8;;https://docs.docker.com/compose/\e\\Docker Compose\e]8;;\e\\'
GIT_URI='\e]8;;https://git-scm.com/download/\e\\Git\e]8;;\e\\'
projectID=''
dockerComposeCommand='docker compose'

function output_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og${HAIR} COMMAND${SPACER}"
    printf "${INDENT}Commands:${EOL}"
    printf "${INDENT}${INDENT}${BOLD}docker${HAIR}    Interfaces with the ${REPO_URI} repository.${SPACER}"
    printf "${INDENT}${INDENT}          Usage: ${BOLD}og docker${HAIR} COMMAND${SPACER}"
    printf "${INDENT}${INDENT}          Commands:${EOL}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}init${HAIR}       Initializes a new ${REPO_URI} instance into a directory with the provided PROJECT ID. The PROJECT ID must be lowercase and contain only alphanumeric characters.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}           Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}destroy${HAIR}    Deletes the project directory, docker images, and docker networks for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}           Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}          ${INDENT}${BOLD}help${HAIR}       Outputs the og docker manual.${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}help${HAIR}      Outputs this manual.${EOL}"
    printf "${EOL}"

}

function output_docker_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker${HAIR} COMMAND${SPACER}"
    printf "${INDENT}Commands:${EOL}"
    printf "${INDENT}${INDENT}${BOLD}init${HAIR}       Initializes a new ${REPO_URI} instance into a directory with the provided PROJECT ID. The PROJECT ID must be lowercase and contain only alphanumeric characters.${SPACER}"
    printf "${INDENT}${INDENT}           Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}destroy${HAIR}    Deletes the project directory, docker images, and docker networks for the given PROJECT ID.${SPACER}"
    printf "${INDENT}${INDENT}           Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${SPACER}"
    printf "${INDENT}${INDENT}${BOLD}help${HAIR}       Outputs this manual.${EOL}"
    printf "${EOL}"

}

function output_docker_init_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker init${HAIR} [PROJECT ID]${EOL}"
    printf "${EOL}"

}

function output_docker_destroy_man {

    printf "${EOL}"
    printf "${INDENT}Usage: ${BOLD}og docker destroy${HAIR} [PROJECT ID]${EOL}"
    printf "${EOL}"

}

function does_docker_project_exist {

    dockerProjectNotExist='false'

    docker network inspect og-proxy-network--$1 >/dev/null 2>&1 || dockerProjectNotExist='true'

    if [[ $dockerProjectNotExist == "true" ]]; then

        echo "false"
        return 0

    fi

    echo "true"
    return 0

}

function does_project_directory_exist {

    if [[ -d "$(pwd)/$1" ]]; then

        echo "true"
        return 0

    fi

    echo "false"
    return 0

}

function regenerate_hosts_file {

    if [[ -d "/etc/hosts.d" ]]; then

        if [[ -f "/etc/hosts.d/default.conf" ]]; then

            cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

        else

            sudo cp /etc/hosts /etc/hosts.d/default.conf
            cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

        fi

    else

        sudo mkdir /etc/hosts.d
        sudo cp /etc/hosts /etc/hosts.d/default.conf
        cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function generate_project_hosts_file {

    regenerate_hosts_file

    if [[ -d "/etc/hosts.d" ]]; then

        if [[ -f "/etc/hosts.d/$1.conf" ]]; then

            sudo rm -rf /etc/hosts.d/$1.conf

        fi

        sudo touch /etc/hosts.d/$1.conf
        echo "" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	open-$1.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	registry-$1.open.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	portal-$1.open.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	solr-$1.open.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "127.0.0.1	search-$1.open.local" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        echo "" | sudo tee -a /etc/hosts.d/$1.conf >/dev/null
        cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function delete_project_hosts_file {

    regenerate_hosts_file

    if [[ -d "/etc/hosts.d" ]]; then

        sudo rm -rf /etc/hosts.d/$1.conf
        cat /etc/hosts.d/*.conf | sudo tee /etc/hosts >/dev/null

    fi

}

function docker_init_command {

    if [[ $3 ]]; then

        if [[ $3 == "default" ]]; then

            printf "${EOL}"
            printf "${Red}${INDENT}Project ID ${ITALIC}${BOLD}$3${HAIR}${Red} is a reserved ID. Abandoning docker project creation.${NC}${SPACER}"
            return 0

        fi

        if [[ ! -z "${3//[_[:digit:][:lower:]]}" && ! -z "${3//[-[:digit:][:lower:]]}" ]]; then

            printf "${EOL}"
            printf "${Red}${INDENT}Provided ID ${ITALIC}${BOLD}$3${HAIR}${Red} illegal. Project IDs must be lowercase and contain only alphanumeric characters. Abandoning docker project creation.${NC}${SPACER}"
            return 0

        fi

        if [[ $(does_docker_project_exist $3) == "false" ]]; then

            if [[ $(does_project_directory_exist $3) == "false" ]]; then

                projectID=$3
                confirmProjectCreation='false'

                printf "${EOL}"
                printf "${Cyan}${INDENT}Are you sure you want to create a new Docker OG project at ${ITALIC}${BOLD}$(pwd)/${projectID}${HAIR}${Cyan} with the ID of ${ITALIC}${BOLD}${projectID}${HAIR}${Cyan}?${NC}${EOL}"
                read -r -p $'\033[0;36m    [y/N]: \033[0;0m' response

                if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

                    confirmProjectCreation='true'

                fi

                if [[ $confirmProjectCreation == "true" ]]; then

                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Generating new project host file ${ITALIC}${BOLD}/etc/hosts.d/$3.conf${HAIR}${Cyan}. Maybe prompt for admin password...${NC}${EOL}"
                    generate_project_hosts_file $3

                    #TODO: confirm docker-og instance creation at $(pwd)/${projectID}
                    #TODO: create docker networks (use "docker network create og-proxy-network--$projectID; && docker network create og-local-network--$projectIDl")
                    #TODO: pull docker-og repo into $(pwd)/${projectID}
                    #TODO: echo ${projectID} > .project.env

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Abandoning docker project creation with ID: ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD}${NC}${SPACER}"

                fi
        
            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}Project directory ${ITALIC}${BOLD}$(pwd)/$3${HAIR}${Yellow}${BOLD} already exist.${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Yellow}${INDENT}Docker project with ID ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} already exist.${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Please supply a PROJECT ID${NC}${EOL}"
        output_docker_init_man

    fi

}

function docker_destroy_command {

    if [[ $3 ]]; then

        if [[ $(does_docker_project_exist $3) == "true"  ]]; then

            if [[ $(does_project_directory_exist $3) == "true"  ]]; then

                projectID=$3
                confirmProjectDeletion='false'

                printf "${EOL}"
                printf "${Cyan}${INDENT}Are you sure you want to delete the Docker OG project at ${ITALIC}${BOLD}$(pwd)/${projectID}${HAIR}${Cyan} with the ID of ${ITALIC}${BOLD}${projectID}${HAIR}${Cyan}?${NC}${EOL}"
                read -r -p $'\033[0;36m    [y/N]: \033[0;0m' response

                if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then

                    confirmProjectDeletion='true'

                fi

                if [[ $confirmProjectCreation == "true" ]]; then

                    printf "${EOL}"
                    printf "${Cyan}${INDENT}Removing project host file ${ITALIC}${BOLD}/etc/hosts.d/$3.conf${HAIR}${Cyan}. Maybe prompt for admin password...${NC}${SPACER}"
                    delete_project_hosts_file $3

                    #TODO: confirm docker-og instance destruction
                    #TODO: remove networks (use "docker network rm og-proxy-network--$projectID; && docker network rm og-local-network--$projectIDl")
                    #TODO: remove images (use "docker image prune --filter 'label=projectID=$projectID';")
                    #TODO: remove directory
                    #TODO: remove hosts file and re-generate host file (use "cat /etc/hosts.d/*.conf | sudo tee /etc/hosts")

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Abandoning docker project deletion with ID: ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD}${NC}${SPACER}"

                fi

            else

                printf "${EOL}"
                printf "${Yellow}${INDENT}Project directory ${ITALIC}${BOLD}$(pwd)/$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Yellow}${INDENT}Docker project with ID ${ITALIC}${BOLD}$3${HAIR}${Yellow}${BOLD} does not exist.${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}Please supply a PROJECT ID${NC}${EOL}"
        output_docker_destroy_man

    fi

}

function docker_command  {

    if [[ -x "$(command -v docker)" ]]; then

        # Gets the correct docker compose command (docker compose being the newest and docker-compose being older)
        if [[ -x "$(command -v 'docker compose')" ]]; then

            dockerComposeCommand='docker compose'

        elif [[ -x "$(command -v docker-compose)" ]]; then

            dockerComposeCommand='docker-compose'

        else

            dockerComposeCommand='false'

        fi

        if [[ dockerComposeCommand != "false" ]]; then

            if [[ -x "$(command -v git)" ]]; then
        
                if [[ $2 ]]; then

                    if [[ $2 == "init" ]]; then

                        docker_init_command "$@"

                    elif [[ $2 == "destroy" ]]; then

                        docker_destroy_command "$@"

                    elif [[ $2 == "help" ]]; then

                        output_docker_man

                    else

                        #TODO: try to exec docker compose command
                        printf "${EOL}"
                        printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$2${HAIR}${Yellow}${BOLD} not found${NC}${EOL}"
                        output_docker_man

                    fi

                else

                    printf "${EOL}"
                    printf "${Yellow}${INDENT}Please supply a COMMAND${NC}${EOL}"
                    output_docker_man

                fi

            else

                printf "${EOL}"
                printf "${Red}${INDENT}${BOLD}${GIT_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${GIT_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable.${HAIR}${NC}${SPACER}"

            fi

        else

            printf "${EOL}"
            printf "${Red}${INDENT}${BOLD}${COMPOSE_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${COMPOSE_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable or via the ${ITALIC}${BOLD}docker${HAIR}${Red}${BOLD} command.${HAIR}${NC}${SPACER}"

        fi

    else

        printf "${EOL}"
        printf "${Red}${INDENT}${BOLD}${DOCKER_URI} not found. ${ITALIC}${BOLD}Docker OG${HAIR}${Red}${BOLD} requires ${DOCKER_URI} to be installed and available in your ${ITALIC}${BOLD}PATH${HAIR}${Red}${BOLD} variable.${HAIR}${NC}${SPACER}"

    fi

}

# check for first command
if [[ $1 ]]; then

    if [[ $1 == "docker" ]]; then

        docker_command "$@"

    elif [[ $1 == "help"  ]]; then

        output_man

    else

        printf "${EOL}"
        printf "${Yellow}${INDENT}COMMAND ${ITALIC}${BOLD}$1${HAIR}${Yellow}${BOLD} not found${NC}${EOL}"
        output_man

    fi

else

    printf "${EOL}"
    printf "${Yellow}${INDENT}Please supply a COMMAND${NC}${EOL}"
    output_man

fi